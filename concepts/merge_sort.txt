Follows divide and conquer strategy 

External Sort Algorithm because it requires one temporary array to store intermediate result 

We divide the array in two positions from mid point 
mid=(lower_index+upper_index)/2
We follow the same process every time i.e divide the corresponding subarray in 2 parts
We add 2 adjacent subarray to make it sorted subarray
Then we merge them into one sorted array

ALGO:

MergeSort(a,low,high)
{
    if(low<high)
    mid=(low+high)/2
    Call MergeSort(a,low,mid)
    Call MergeSort(a,mid+1,high)
    Merge(a,low,high,mid)
    END
}

Merge(a,low,high,mid)
{
    i=low,j=mid+1
    k=low
    while(i<mid && j<high)
    {
        if(a[i]<a[j])
        c[k++]=a[i++]
        else
        c[k++]=a[j++]
    }
    while(i<=mid)
    {
        c[k++]=a[i++]
    }
    while(j<=high)
    {
        c[k++]=a[j++]
    }
    for(i=low;i<=k;i++)
    {
        a[i]=c[i]
    }
    END 
}

Complexity:

Time complexity: O(nlog n)
Space Complexity :O (1)
